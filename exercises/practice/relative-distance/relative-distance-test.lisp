;; Ensures that relative-distance.lisp and the testing library are always loaded
(eval-when (:compile-toplevel :load-toplevel :execute)
  (load "relative-distance")
  (quicklisp-client:quickload :fiveam))

;; Defines the testing package with symbols from relative-distance and FiveAM in scope
;; The `run-tests` function is exported for use by both the user and test-runner
(defpackage :relative-distance-test
  (:use :cl :fiveam)
  (:export :run-tests))

;; Enter the testing package
(in-package :relative-distance-test)

;; Define and enter a new FiveAM test-suite
(def-suite* relative-distance-suite)

(test direct-parent-child-relation
    (let ((family-tree '(("Vera" . ("Tomoko"))
                         ("Tomoko" . ("Aditi"))))
          (person-a "Vera")
          (person-b "Tomoko"))
      (is (= 1 (relative-distance:degree-of-separation family-tree person-a person-b)))))

(test sibling-relationship
    (let ((family-tree '(("Dalia" . ("Olga" "Yassin"))))
          (person-a "Olga")
          (person-b "Yassin"))
      (is (= 1 (relative-distance:degree-of-separation family-tree person-a person-b)))))

(test two-degrees-of-separation-grandchild
    (let ((family-tree '(("Khadija" . ("Mateo"))
                         ("Mateo" . ("Rami"))))
          (person-a "Khadija")
          (person-b "Rami"))
      (is (= 2 (relative-distance:degree-of-separation family-tree person-a person-b)))))

(test unrelated-individuals
    (let ((family-tree '(("Priya" . ("Rami"))
                         ("Kaito" . ("Elif"))))
          (person-a "Priya")
          (person-b "Kaito"))
      (is (equal NIL (relative-distance:degree-of-separation family-tree person-a person-b)))))

(test complex-graph-cousins
    (let ((family-tree '(("Aiko" . ("Bao" "Carlos")) 
                         ("Bao" . ("Dalia" "Elias")) 
                         ("Carlos" . ("Fatima" "Gustavo"))
                         ("Dalia" . ("Hassan" "Isla")) 
                         ("Elias" . ("Javier")) 
                         ("Fatima" . ("Khadija" "Liam")) 
                         ("Gustavo" . ("Mina")) 
                         ("Hassan" . ("Noah" "Olga")) 
                         ("Isla" . ("Pedro")) 
                         ("Javier" . ("Quynh" "Ravi")) 
                         ("Khadija" . ("Sofia")) 
                         ("Liam" . ("Tariq" "Uma")) 
                         ("Mina" . ("Viktor" "Wang")) 
                         ("Noah" . ("Xiomara")) 
                         ("Olga" . ("Yuki")) 
                         ("Pedro" . ("Zane" "Aditi")) 
                         ("Quynh" . ("Boris")) 
                         ("Ravi" . ("Celine"))
                         ("Sofia" . ("Diego" "Elif")) 
                         ("Tariq" . ("Farah"))
                         ("Uma" . ("Giorgio"))
                         ("Viktor" . ("Hana" "Ian"))
                         ("Wang" . ("Jing")) 
                         ("Xiomara" . ("Kaito")) 
                         ("Yuki" . ("Leila")) 
                         ("Zane" . ("Mateo")) 
                         ("Aditi" . ("Nia"))
                         ("Boris" . ("Oscar")) 
                         ("Celine" . ("Priya")) 
                         ("Diego" . ("Qi")) 
                         ("Elif" . ("Rami")) 
                         ("Farah" . ("Sven")) 
                         ("Giorgio" . ("Tomoko")) 
                         ("Hana" . ("Umar")) 
                         ("Ian" . ("Vera"))
                         ("Jing" . ("Wyatt"))
                         ("Kaito" . ("Xia"))
                         ("Leila" . ("Yassin"))
                         ("Mateo" . ("Zara"))
                         ("Nia" . ("Antonio"))
                         ("Oscar" . ("Bianca"))
                         ("Priya" . ("Cai"))
                         ("Qi" . ("Dimitri"))
                         ("Rami" . ("Ewa"))
                         ("Sven" . ("Fabio"))
                         ("Tomoko" . ("Gabriela"))
                         ("Umar" . ("Helena"))
                         ("Vera" . ("Igor"))
                         ("Wyatt" . ("Jun"))
                         ("Xia" . ("Kim"))
                         ("Yassin" . ("Lucia"))
                         ("Zara" . ("Mohammed"))))
          (person-a "Dimitri")
          (person-b "Fabio"))
      (is (= 9 (relative-distance:degree-of-separation family-tree person-a person-b)))))

(test complex-graph-no-shortcut-far-removed-nephew
    (let ((family-tree '(("Aiko" . ("Bao" "Carlos"))
                         ("Bao" . ("Dalia" "Elias"))
                         ("Carlos" . ("Fatima" "Gustavo"))
                         ("Dalia" . ("Hassan" "Isla"))
                         ("Elias" . ("Javier"))
                         ("Fatima" . ("Khadija" "Liam"))
                         ("Gustavo" . ("Mina"))
                         ("Hassan" . ("Noah" "Olga"))
                         ("Isla" . ("Pedro"))
                         ("Javier" . ("Quynh" "Ravi"))
                         ("Khadija" . ("Sofia"))
                         ("Liam" . ("Tariq" "Uma"))
                         ("Mina" . ("Viktor" "Wang"))
                         ("Noah" . ("Xiomara"))
                         ("Olga" . ("Yuki"))
                         ("Pedro" . ("Zane" "Aditi"))
                         ("Quynh" . ("Boris"))
                         ("Ravi" . ("Celine"))
                         ("Sofia" . ("Diego" "Elif"))
                         ("Tariq" . ("Farah"))
                         ("Uma" . ("Giorgio"))
                         ("Viktor" . ("Hana" "Ian"))
                         ("Wang" . ("Jing"))
                         ("Xiomara" . ("Kaito"))
                         ("Yuki" . ("Leila"))
                         ("Zane" . ("Mateo"))
                         ("Aditi" . ("Nia"))
                         ("Boris" . ("Oscar"))
                         ("Celine" . ("Priya"))
                         ("Diego" . ("Qi"))
                         ("Elif" . ("Rami"))
                         ("Farah" . ("Sven"))
                         ("Giorgio" . ("Tomoko"))
                         ("Hana" . ("Umar"))
                         ("Ian" . ("Vera"))
                         ("Jing" . ("Wyatt"))
                         ("Kaito" . ("Xia"))
                         ("Leila" . ("Yassin"))
                         ("Mateo" . ("Zara"))
                         ("Nia" . ("Antonio"))
                         ("Oscar" . ("Bianca"))
                         ("Priya" . ("Cai"))
                         ("Qi" . ("Dimitri"))
                         ("Rami" . ("Ewa"))
                         ("Sven" . ("Fabio"))
                         ("Tomoko" . ("Gabriela"))
                         ("Umar" . ("Helena"))
                         ("Vera" . ("Igor"))
                         ("Wyatt" . ("Jun"))
                         ("Xia" . ("Kim"))
                         ("Yassin" . ("Lucia"))
                         ("Zara" . ("Mohammed"))))
          (person-a "Lucia")
          (person-b "Jun"))
      (is (= 14 (relative-distance:degree-of-separation family-tree person-a person-b)))))

(test complex-graph-some-shortcuts-cross-down-and-cross-up-cousins-several-times-removed-with-unrelated-family-tree
    (let ((family-tree '(("Aiko" . ("Bao" "Carlos"))
                         ("Bao" . ("Dalia"))
                         ("Carlos" . ("Fatima" "Gustavo"))
                         ("Dalia" . ("Hassan" "Isla"))
                         ("Fatima" . ("Khadija" "Liam"))
                         ("Gustavo" . ("Mina"))
                         ("Hassan" . ("Noah" "Olga"))
                         ("Isla" . ("Pedro"))
                         ("Javier" . ("Quynh" "Ravi"))
                         ("Khadija" . ("Sofia"))
                         ("Liam" . ("Tariq" "Uma"))
                         ("Mina" . ("Viktor" "Wang"))
                         ("Noah" . ("Xiomara"))
                         ("Olga" . ("Yuki"))
                         ("Pedro" . ("Zane" "Aditi"))
                         ("Quynh" . ("Boris"))
                         ("Ravi" . ("Celine"))
                         ("Sofia" . ("Diego" "Elif"))
                         ("Tariq" . ("Farah"))
                         ("Uma" . ("Giorgio"))
                         ("Viktor" . ("Hana" "Ian"))
                         ("Wang" . ("Jing"))
                         ("Xiomara" . ("Kaito"))
                         ("Yuki" . ("Leila"))
                         ("Zane" . ("Mateo"))
                         ("Aditi" . ("Nia"))
                         ("Boris" . ("Oscar"))
                         ("Celine" . ("Priya"))
                         ("Diego" . ("Qi"))
                         ("Elif" . ("Rami"))
                         ("Farah" . ("Sven"))
                         ("Giorgio" . ("Tomoko"))
                         ("Hana" . ("Umar"))
                         ("Ian" . ("Vera"))
                         ("Jing" . ("Wyatt"))
                         ("Kaito" . ("Xia"))
                         ("Leila" . ("Yassin"))
                         ("Mateo" . ("Zara"))
                         ("Nia" . ("Antonio"))
                         ("Oscar" . ("Bianca"))
                         ("Priya" . ("Cai"))
                         ("Qi" . ("Dimitri"))
                         ("Rami" . ("Ewa"))
                         ("Sven" . ("Fabio"))
                         ("Tomoko" . ("Gabriela"))
                         ("Umar" . ("Helena"))
                         ("Vera" . ("Igor"))
                         ("Wyatt" . ("Jun"))
                         ("Xia" . ("Kim"))
                         ("Yassin" . ("Lucia"))
                         ("Zara" . ("Mohammed"))))
          (person-a "Wyatt")
          (person-b "Xia"))
      (is (= 12 (relative-distance:degree-of-separation family-tree person-a person-b)))))

(defun run-tests (&optional (test-or-suite 'relative-distance-suite))
  "Provides human readable results of test run. Default to entire suite."
  (run! test-or-suite))
